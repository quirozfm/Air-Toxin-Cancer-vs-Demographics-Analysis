# LEGEND 
______________________________________________________
| Task                                               | Code                                                                             |
|--------------------------------------------------- |----------------------------------------------------------------------------------|
| Load necessary libraries                           | `library(readxl)`, `library(dplyr)`, `library(ggplot2)`, etc.                    |
| Load the data                                      | `data <- read_excel('F:/Air toxins cancer risk data.xlsx')`                      |
| Remove rows with missing values                    | `clean_data <- na.omit(data)`                                                    |
| Subset the columns of interest                     | `clean_data <- clean_data[, c("tot_can", "MINORPCT", ...)]`                      | 
| Calculate the correlation matrix                   | `correlation_matrix <- cor(clean_data)`                                          |
| Transform the correlation matrix for visualization | `melted_correlation_matrix <- melt(correlation_matrix)`                          |
| Create a heatmap to visualize correlations         | `heatmap_plot <- ggplot(data = melted_correlation_matrix, ...)`                  |
| Create a barplot for correlation with 'tot_can'    | `barplot <- clean_data %>% gather(key = "variable", value = "correlation", ...)` |
| Exclude non-numeric columns (if any)               | `numeric_data <- clean_data[sapply(clean_data, is.numeric)]`                     |
| Scale the numeric variables                        | `scaled_data <- scale(numeric_data)`                                             |
| Determine optimal number of clusters               | `wss <- sapply(1:10, function(k) { ... })`                                       |
| Perform k-means clustering                         | `kmeans_result <- kmeans(scaled_data, centers = k_optimal, ...)`                 |
| Add cluster assignments to the data                | `clean_data$cluster <- as.factor(kmeans_result$cluster)`                         |
| Explore cluster means                              | `cluster_means <- aggregate(scaled_data, ...)`                                   |

# Code Used for Analysis

library(readxl)
library(dplyr)
library(ggplot2)
library(reshape2)
library(tidyverse)
library(dbscan)
library(car)
library(MASS)
------------------------------------------------------------------------------------------
data <- read_excel('F:/Air toxins cancer risk data.xlsx')
------------------------------------------------------------------------------------------
clean_data <- na.omit(data)
------------------------------------------------------------------------------------------
clean_data <- clean_data[, c("tot_can", "MINORPCT", "LOWINCPCT", "LESSHSPCT", "LINGISOPCT", "UNDER5PCT", "OVER64PCT")]
------------------------------------------------------------------------------------------
correlation_matrix <- cor(clean_data)
------------------------------------------------------------------------------------------
melted_correlation_matrix <- melt(correlation_matrix)
------------------------------------------------------------------------------------------
heatmap_plot <- ggplot(data = melted_correlation_matrix, aes(x=Var1, y=Var2, fill=value)) + 
  geom_tile() +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, limit = c(-1,1), space = "Lab", 
                       name="Pearson\nCorrelation") +
  theme_minimal() + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, 
                                   size = 12, hjust = 1),
        axis.title.x=element_blank(),
        axis.title.y=element_blank(),
        panel.grid.major = element_blank(), 
        panel.border = element_blank(), 
        panel.background = element_blank(),
        legend.justification = c(1, 0),
        legend.position = c(0.6, 0.7), 
        legend.direction = "horizontal") +
  coord_fixed()
------------------------------------------------------------------------------------------
barplot <- clean_data %>%
  gather(key = "variable", value = "correlation", -tot_can) %>%
  mutate(correlation = abs(correlation)) %>%
  ggplot(aes(x = reorder(variable, correlation), y = correlation)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  labs(x = "Variables", y = "Correlation with 'tot_can'")

------------------------------------------------------------------------------------------
numeric_data <- clean_data[sapply(clean_data, is.numeric)]

------------------------------------------------------------------------------------------
scaled_data <- scale(numeric_data)

------------------------------------------------------------------------------------------
wss <- sapply(1:10, function(k) {
  kmeans(scaled_data, centers = k, nstart = 10)$tot.withinss
})

------------------------------------------------------------------------------------------
k_optimal <- 3

------------------------------------------------------------------------------------------
kmeans_result <- kmeans(scaled_data, centers = k_optimal, nstart = 10)

------------------------------------------------------------------------------------------
clean_data$cluster <- as.factor(kmeans_result$cluster)

------------------------------------------------------------------------------------------
cluster_means <- aggregate(scaled_data, list(clean_data$cluster), mean)
print(cluster_means)

------------------------------------------------------------------------------------------
scatter_plot <- ggplot(clean_data, aes(x = MINORPCT, y = tot_can, color = cluster)) +
  geom_point() +
  theme_minimal() +
  labs(title = "k-means Clustering of the Dataset", x = "Minority Percentage", y = "Total Cancer Risk")

------------------------------------------------------------------------------------------
print(heatmap_plot)
print(barplot)
print(scatter_plot)

------------------------------------------------------------------------------------------
set.seed(123)  # for reproducibility
train_index <- sample(1:nrow(clean_data), nrow(clean_data) * 0.8)
train_set <- clean_data[train_index, ]
test_set <- clean_data[-train_index, ]

------------------------------------------------------------------------------------------
lm_model <- lm(tot_can ~ ., data = train_set)

------------------------------------------------------------------------------------------
lm_pred <- predict(lm_model, newdata = test_set)

------------------------------------------------------------------------------------------
mse <- mean((test_set$tot_can - lm_pred)^2)
print(paste("Linear regression MSE:", mse))

------------------------------------------------------------------------------------------
plot_data <- data.frame(Actual = test_set$tot_can, Predicted = lm_pred)
scatter_plot <- ggplot(plot_data, aes(x = Actual, y = Predicted)) +
  geom_point() +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
  labs(title = "Linear Regression: Actual vs. Predicted", x = "Actual", y = "Predicted")

------------------------------------------------------------------------------------------
lm_model <- lm(Predicted ~ Actual, data = scatter_plot$data)

------------------------------------------------------------------------------------------
summary(lm_model)

------------------------------------------------------------------------------------------
coefficients(lm_model)

------------------------------------------------------------------------------------------
summary(lm_model)$coefficients[, "Pr(>|t|)"]

------------------------------------------------------------------------------------------
summary(lm_model)$r.squared

------------------------------------------------------------------------------------------
print(significant_vars)
# Print the scatter plot
print(scatter_plot)

------------------------------------------------------------------------------------------
data <- read_excel('F:/Air toxins cancer risk data.xlsx')

------------------------------------------------------------------------------------------
clean_data <- na.omit(data)

------------------------------------------------------------------------------------------
clean_data <- clean_data[, c("tot_can", "MINORPCT", "LOWINCPCT", "LESSHSPCT", "LINGISOPCT", "UNDER5PCT", "OVER64PCT")]

------------------------------------------------------------------------------------------
lm_model <- lm(tot_can ~ ., data = clean_data)
------------------------------------------------------------------------------------------
stepwise_model <- stepAIC(lm_model, direction = "both")
------------------------------------------------------------------------------------------
summary(lm_model)$coefficients[, c("Estimate", "Pr(>|t|)")]

------------------------------------------------------------------------------------------
significant_vars <- names(summary(lm_model)$coefficients[summary(lm_model)$coefficients[, "Pr(>|t|)"] < 0.05, ])

------------------------------------------------------------------------------------------
print(significant_vars)

------------------------------------------------------------------------------------------
vif(lm_model)

------------------------------------------------------------------------------------------
plot(lm_model, which = c(1, 2, 3, 5))

------------------------------------------------------------------------------------------
train_control <- trainControl(method = "cv", number = 5)
cv_model <- train(tot_can ~ ., data = clean_data, method = "lm", trControl = train_control)

------------------------------------------------------------------------------------------
print(summary(lm_model))

------------------------------------------------------------------------------------------
set.seed(123)  # for reproducibility
train_index <- sample(1:nrow(clean_data), nrow(clean_data) * 0.8)
train_set <- clean_data[train_index, ]
test_set <- clean_data[-train_index, ]

------------------------------------------------------------------------------------------
lm_model <- lm(tot_can ~ ., data = train_set)

------------------------------------------------------------------------------------------
lm_pred <- predict(lm_model, newdata = test_set)

------------------------------------------------------------------------------------------
mse <- mean((test_set$tot_can - lm_pred)^2)
print(paste("Linear regression MSE:", mse))

------------------------------------------------------------------------------------------
plot_data <- data.frame(Actual = test_set$tot_can, Predicted = lm_pred)
scatter_plot <- ggplot(plot_data, aes(x = Actual, y = Predicted)) +
  geom_point() +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
  labs(title = "Linear Regression: Actual vs. Predicted", x = "Actual", y = "Predicted")

------------------------------------------------------------------------------------------
lm_model <- lm(Predicted ~ Actual, data = scatter_plot$data)

------------------------------------------------------------------------------------------
summary(lm_model)

